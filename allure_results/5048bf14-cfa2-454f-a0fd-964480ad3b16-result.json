{"name": "Проверка категории Мобильные телефоны.", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.TimeoutException: Message:", "trace": "self = <tests.test_functionality.TestMainFunctionality object at 0x104c22fc0>\ndriver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"71f6cb367d4247eb5a9b3df5a711a746\")>\n\n    @allure.title(\"Проверка категории Мобильные телефоны.\")\n    def test_phone_field_true(self, driver):\n        driver.get(SEARCH_URL)\n        page = BasePage(driver)\n    \n        page.click_element_search_url()\n        page.enter_search_input(\"Onliner\")\n        page.click_search_button()\n        page.click_search_field()\n        page.click_login_button()\n        page.enter_email_input(\"cokol2122@mail.ru\")\n        page.enter_password_input(\"test_password\")\n        page.click_submit_button()\n>       page.click_phone_button()\n\ntests/test_functionality.py:62: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npages/base_page.py:49: in click_phone_button\n    self.wait_and_click(Locators.PHONE_BUTTON)\npages/base_page.py:13: in wait_and_click\n    element = WebDriverWait(self.driver, timeout).until(EC.element_to_be_clickable(locator))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"71f6cb367d4247eb5a9b3df5a711a746\")>\nmethod = <function element_to_be_clickable.<locals>._predicate at 0x104d314e0>, message = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value does not evaluate to ``False``.\n    \n        :param method: callable(WebDriver)\n        :param message: optional message for :exc:`TimeoutException`\n        :returns: the result of the last call to `method`\n        :raises: :exc:`selenium.common.exceptions.TimeoutException` if timeout occurs\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            if time.monotonic() > end_time:\n                break\n            time.sleep(self._poll)\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message:\n\n.venv/lib/python3.12/site-packages/selenium/webdriver/support/wait.py:105: TimeoutException"}, "start": 1733748439931, "stop": 1733748459023, "uuid": "11ab5321-9350-4b21-b2d0-9cc5553ec2ab", "historyId": "7ab91ba8d01029201e04c6cd73c357cd", "testCaseId": "7ab91ba8d01029201e04c6cd73c357cd", "fullName": "tests.test_functionality.TestMainFunctionality#test_phone_field_true", "labels": [{"name": "tag", "value": "@pytest.mark.usefixtures('driver')"}, {"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_functionality"}, {"name": "subSuite", "value": "TestMainFunctionality"}, {"name": "host", "value": "falcon.local"}, {"name": "thread", "value": "46262-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_functionality"}]}